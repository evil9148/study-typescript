Type Narrowing

union type처럼 타입이 한가지가 확실하게 지정되지 않았을 때 if문 등으로 타입을 하나로 정해주는 것을 뜻한다.

function fn(x: string | number){
 return x + 1
}
위와 같이 함수를 만들 경우 에러가 발생한다. 파라미터의 타입이 아직 정해지지 않은 유니온 타입 상태이기 때문에 연산자가 작동을 하지 않는다.
그래서 파라미터에 어떤 타입이 입력될지 모르는 함수를 만들 경우 if 조건문과 typeof를 사용하여 타입을 확인해서 각 타입에 맞게 작동이 될 코드를 작성해준다. 타입이 확실하지 않을  때 발생하는 에러를 막기 위한 장치라고 보면된다.
이걸 defensive 하게 코딩한다라고 하기도 한다.

function fn(x :number|string){
  let array :number[] = []
  if(typeof x === 'number'){
   array[0] = x
  } else {
   return false
  }
  return array
} 

이렇게 해야 코드가 정상적으로 작동한다.
typeof 는 문자열을 반환하기에 'number'로 입력하는게 맞다.

함수 안에서 if문을 작성할 때 마지막에 else{}가 없으면 에러가 발생할 수 있다.
return 하지 않는 조건문이 있다면 나중에 버그가 생길 수 있어서 에러가 발생하는 것인데 성가시다면 tsconfig.js 파일에서 "noImplicitReturns": false 를 추가하면 된다. 하지만 되도록 그냥 쓰는게 좋다.

- 꼭 typeof를 쓸 필요는 없고 타입을 하나로 확정지을 수 있는 코드라면 어떤 것도 Narrowing 역할을 할 수 있다. 
- in, instanceof 키워드도 사용이 가능하다.


Type Assertion
Narrowing 방식이 복잡하다면 간편하게 assert 할 수도 있다. 타입을 덮어 씌우는 개념을 가지는 방식이다.
as라는 키워드를 이용하게 되며 변수명 as string 이렇게 입력을 하면 이 변수의 타입은 유니온 타입이 아니고 string 타입이다 라고 주장하여 인식시키는 방식이다.
그렇기에 사용자가 함수에 무조건 string 타입이 입력될 것이라는 사실을 100% 확신을 가지고 있어야 한다.
추가로 함수("123") 이럴 경우 as number라고 입력을 하여도 입력된 파라미터의 타입을 숫자로 바꾸어주지는 않는다. 타입의 본질을 바꾸는게 아니고 개발자가 유니온 타입처럼 2가지 이상의 타입에서 타입을 한가지 선택을 하여 주장을 하는 것 뿐이다.

as 키워드는 간편하게 사용할 수 있는 장점을 가지고 있지만 타입스크립트의 이용목적 중 하나인 엄격한 타입체크 기능을 사용하지 않겠다는 것과 같기에 사용을 주의해야 한다.
1. 에러가 발생하였을 경우 에러가 왜 발생하였는지 모를 때 디버깅 처리를 위해 사용한다.
2. 내가 어떤 타입이 들어올지 확실하게 알고 있을 때 컴파일러 에러가 방해할 때 사용한다.






























































