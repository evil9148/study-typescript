.ts 확장자를 가진 파일을 브라우저가 읽지 못한다. 그렇기에 자바스크립트로 변환하여야 한다.
tsc -w를 터미널에 입력하면 ts파일을 자동으로 js파일로 변환해준다

Typescript 컴파일시 세부설정(tsconfig.json)

tsconfig 파일 생성하기
프로젝트 폴더에 tsconfig.json이라는 파일을 생성한다.

json파일 안에 이렇게 작성을 한다.

{
    "compilerOptions": {
        "target": "ES6"
        "module": "ES6",
    }
}

target은 타입스크립트 파일을 어떤 버전의 자바스크립트로 바꿔줄지 정하는 부분이다.
ES6으로 입력하면 ES6 버전 자바스크립트로 컴파일 해준다.

module은 자바스크립트 파일간 import문법을 구현할 때 어떤 문법을 쓸지 정하는 부분이다.
commonjs는 require 문법 EX6, ESNEXT는 import 문법을 사용합니다.

만약 IE의 호환성을 원한다면 ES5, commonjs를 사용한다.
다만 신버전의 자바스크립트에서 구현 가능한 문법들은 사용을 못한다.

tsconfig에 들어갈 기타 항목들

{
 "compilerOptions": {

  "target": "es5", // 'es3', 'es5', 'es2015', 'es2016', 'es2017','es2018', 'esnext' 가능
  "module": "commonjs", //무슨 import 문법 쓸건지 'commonjs', 'amd', 'es2015', 'esnext'
  "allowJs": true, // js 파일들 ts에서 import해서 쓸 수 있는지 
  "checkJs": true, // 일반 js 파일에서도 에러체크 여부 
  "jsx": "preserve", // tsx 파일을 jsx로 어떻게 컴파일할 것인지 'preserve', 'react-native', 'react'
  "declaration": true, //컴파일시 .d.ts 파일도 자동으로 함께생성 (현재쓰는 모든 타입이 정의된 파일)
  "outFile": "./", //모든 ts파일을 js파일 하나로 컴파일해줌 (module이 none, amd, system일 때만 가능)
  "outDir": "./", //js파일 아웃풋 경로바꾸기
  "rootDir": "./", //루트경로 바꾸기 (js 파일 아웃풋 경로에 영향줌)
  "removeComments": true, //컴파일시 주석제거 

  "strict": true, //strict 관련, noimplicit 어쩌구 관련 모드 전부 켜기
  "noImplicitAny": true, //any타입 금지 여부
  "strictNullChecks": true, //null, undefined 타입에 이상한 짓 할시 에러내기 
  "strictFunctionTypes": true, //함수파라미터 타입체크 강하게 
  "strictPropertyInitialization": true, //class constructor 작성시 타입체크 강하게
  "noImplicitThis": true, //this 키워드가 any 타입일 경우 에러내기
  "alwaysStrict": true, //자바스크립트 "use strict" 모드 켜기

  "noUnusedLocals": true, //쓰지않는 지역변수 있으면 에러내기
  "noUnusedParameters": true, //쓰지않는 파라미터 있으면 에러내기
  "noImplicitReturns": true, //함수에서 return 빼먹으면 에러내기 
  "noFallthroughCasesInSwitch": true, //switch문 이상하면 에러내기 
 }
}



타입스크립트 기본 타입 정리(primitive types)

변수 만들 때 타입 정하기(타입 실드 씌우기)
타입스크립트는 변수를 만들 때 타입을 지정을 할 수 있다.
let 이름 :string = 'jun';
변수명:타입 이렇게 작성을 하면 된다. string으로 설정을 할 경우 숫자를 입력하게 되면 에러가 발생을 한다.
number로 입력하면 숫자만 입력이 가능하며 문자를 입력할 경우 에러가 발생한다.
타입은 여러가지가 있으며 string, number, boolean이 있으며 null, undefined도 있지만 굳이 사용하지는 않는다.

array 또는 object 자료 안에도 타입 지정가능

let member :string[] = ['jun', 'kyu', 'jang']

array 안에 들어갈 타입은 타입명[] 이렇게 지정하면 된다.
array의 값을 각각 string 타입을 설정을 했으며 숫자를 입력하면 에러가 발생한다.
만약 숫자도 같이 입력을 하고 싶다면 변수명:(string | number)[] 이렇게 입력하면 된다.

let myage : { age : number } = { age : 30 }
object는 객체 값으로 들어갈 타입은 만들 object와 똑같은 모습으로 지정하면 된다.
변수명 오른쪽에 오는 것들은 전부 타입지정 문법이며 이렇게 입력하여 age 속성의 값으로 오직 숫자만 입력할 수 있다.

let 이름 :string = 'jun';
이름 = 30;

타입을 잘 지정해준다면 위에 같이 타입이 실수로 변경될 때 이런 경고성 에러가 발생하여 빠른 대처가 가능하다.
Type 'number' is not assignable to type 'string'.(2322)

let test = 'jun';
test = 30;

자바스크립트 식으로 작성을 하면 자바스크립트의 유연성과 타입 설정이 안되어서 인하여 에러가 발생하지 않고 값이 변경된다.


그렇다고 하여 모든 변수에 타입을 일일이 지정을 하지 않는다.

왜냐하면, 변수 생성시 타입스크립트가 타입을 자동으로 부여를 해준다.

let 이름 = 'jun';
let 나이 = 30;

이렇게만 작성하여도 이름에는 string, 나이에는 number의 타입을 가지고 있다.
변수명에 마우스를 올리면 바로 확인이 가능하다.
물론 array, object 만들 때도 자동으로 알아서 된다.

심지어 변수만 선언하고 나중에 가서 값을 설정하였을 때 자동으로 입력한 값에 맞는 타입으로 변경이 된다.

let 이름;
이름 = 1234; 

위 같이 입력하면 이름 변수의 타입은 숫자로 설정이 된다.

다만 그 후에 이름의 변수 값을 재설정을 하면 타입이 또 다시 바뀐다.

let 이름;
이름 = 1234;
이름 = 'jun'

그래서 타입을 고정시키고 싶으면 변수에 타입만 설정을 하면 값은 이후에 설정한 타입으로만 값이 변한다.
let 이름 : string;

